name: CD workflow

on:
  workflow_call:
    secrets:
      ENVIRONMENT:
        required: true
      DOMAIN_NAME:
        required: true
      SERVICE_NAME:
        required: true
      GCP_CREDENTIALS:
        required: true
      VAULT_ADDR:
        required: true
      VAULT_TOKEN:
        required: true

jobs:
  build-test:
    name: Build and Unit Tests
    uses: ./.github/workflows/ci.yaml
    secrets:
      VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
      VAULT_ADDRESS: ${{ secrets.VAULT_ADDR }}
      DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}

  docker-image-push:
    name: Create docker image and push to registry
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Import Secrets
        id: import-secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_ADDRESS }}
          token: ${{ secrets.VAULT_TOKEN }}
          # Temporary skip tls verification for testing purposes
          tlsSkipVerify: true
          secrets: |
            secrets/data/cicd/GITHUBACTION_USERNAME value | GITHUBACTION_USERNAME ;
            secrets/data/cicd/GITHUBACTION_TOKEN value | GITHUBACTION_TOKEN ;
            secrets/data/${{ secrets.ENVIRONMENT }}/cicd/PROJECT_ID value | PROJECT_ID ;
            secrets/data/${{ secrets.ENVIRONMENT }}/cicd/DOCKER_REGISTRY_URL value | DOCKER_REGISTRY_URL ;

        # https://github.com/GitTools/actions/tree/main/docs/examples/github/gitversion
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0

      # https://github.com/docker/build-push-action
      - name: Docker setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Docker setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GAR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY_URL }}
          username: _json_key
          password: ${{ secrets.GCP_CREDENTIALS }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./builds/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REGISTRY_URL }}/${{ env.PROJECT_ID }}/${{ secrets.DOMAIN_NAME}}/${{ secrets.SERVICE_NAME }}:v${{ steps.gitversion.outputs.semVer }}
          build-args: |
            "GITHUB_USERNAME=${{ env.GITHUBACTION_USERNAME }}"
            "GITHUB_TOKEN=${{ env.GITHUBACTION_TOKEN }}"

  db_migration:
    name: Database migration
    needs: docker-image-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Import Secrets
        id: import-secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_ADDRESS }}
          token: ${{ secrets.VAULT_TOKEN }}
          # Temporary skip tls verification for testing purposes
          tlsSkipVerify: true
          secrets: |
            secrets/data/${{ secrets.ENVIRONMENT }}/${{ secrets.DOMAIN_NAME }}/${{ secrets.SERVICE_NAME }}/MIGRATION_DATABASE_INSTANCE_URL value | MIGRATION_DATABASE_INSTANCE_URL ;
            secrets/data/${{ secrets.ENVIRONMENT }}/${{ secrets.DOMAIN_NAME }}/${{ secrets.SERVICE_NAME }}/GCP_DB_INSTANCE_NAME value | GCP_DB_INSTANCE_NAME ;
            secrets/data/${{ secrets.ENVIRONMENT }}/${{ secrets.DOMAIN_NAME }}/${{ secrets.SERVICE_NAME }}/DB_NAME value | DB_NAME ;

      - name: Install PSQL-CLI
        run: |
          sudo apt-get install -y postgresql-client
      # Use this when latest ubuntu distro supports it
      # - name: Install Go migrate
      #   run: |
      #     curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
      #     sudo su -c "echo 'deb https://packagecloud.io/golang-migrate/migrate/ubuntu/ $(lsb_release -sc) main' >> /etc/apt/sources.list.d/migrate.list"
      #     sudo apt-get update
      #     sudo apt-get install -y migrate

      - name: Install Go migrate
        run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.16.0/migrate.linux-amd64.deb --output go-migrate.deb
          sudo apt-get install -y ./go-migrate.deb

      - name: Setup Cloud SQL Auth Proxy
        uses: mattes/gce-cloudsql-proxy-action@v1
        with:
          creds: ${{ secrets.GCP_CREDENTIALS }}
          instance: ${{ env.GCP_DB_INSTANCE_NAME }}

      - name: Run Migration
        run: |
          psql "${{ env.MIGRATION_DATABASE_INSTANCE_URL }}/postgres" -tc "select 1 from pg_database where datname='${{ env.DB_NAME }}';" | grep -q 1 || psql "${{ env.MIGRATION_DATABASE_INSTANCE_URL }}/postgres" -c "CREATE DATABASE \"${{ env.DB_NAME }}\""
          migrate -path ./deployments/migrations -database "${{ env.MIGRATION_DATABASE_INSTANCE_URL }}/${{ env.DB_NAME }}?sslmode=disable" -verbose up

  deploy-staging:
    name: Deploy to staging
    needs: [docker-image-push, db_migration]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Import Secrets
        id: import-secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_ADDRESS }}
          token: ${{ secrets.VAULT_TOKEN }}
          # Temporary skip tls verification for testing purposes
          tlsSkipVerify: true
          secrets: |
            secrets/data/cicd/DEPLOYMENT_REPO value | DEPLOYMENT_REPO ;
            secrets/data/cicd/GITHUBACTION_TOKEN value | GITHUBACTION_TOKEN ;
            secrets/data/${{ secrets.ENVIRONMENT }}/cicd/PROJECT_ID value | PROJECT_ID ;
            secrets/data/${{ secrets.ENVIRONMENT }}/cicd/DOCKER_REGISTRY_URL value | DOCKER_REGISTRY_URL ;
            secrets/data/${{ secrets.ENVIRONMENT }}/cicd/GKE_CLUSTER_NAME value | GKE_CLUSTER_NAME ;
            secrets/data/${{ secrets.ENVIRONMENT }}/cicd/GKE_LOCATION value | GKE_LOCATION ;

      # https://github.com/GitTools/actions/tree/main/docs/examples/github/gitversion
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0

      - id: 'auth'
        name: 'Setup GC Auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - id: 'get-credentials'
        name: 'Setup GKE Credentials'
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: '${{ env.GKE_CLUSTER_NAME }}'
          location: '${{ env.GKE_LOCATION }}'

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Checkout deployment repository
        uses: actions/checkout@v3
        with:
          repository: ${{ env.DEPLOYMENT_REPO }}
          token: ${{ env.GITHUBACTION_TOKEN }}
          path: cicd

      - name: Deploy
        run: |
          helm upgrade --set environment=${{ secrets.ENVIRONMENT }},domain=${{ secrets.DOMAIN_NAME }},srvName=${{ secrets.SERVICE_NAME }},vault_addr=${{ secrets.VAULT_ADDR }},vault_token=${{ secrets.VAULT_TOKEN }},dockerImage=${{ env.DOCKER_REGISTRY_URL }}/${{ env.PROJECT_ID }}/${{ secrets.DOMAIN_NAME}}/${{ secrets.SERVICE_NAME }}:v${{ steps.gitversion.outputs.semVer }} --install ${{ secrets.SERVICE_NAME }} ./cicd/serviceDeployments;

  tag-release:
    name: Tag the release
    needs: deploy-staging
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0

      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag

      - uses: actions-ecosystem/action-push-tag@v1
        with:
          tag: v${{ steps.gitversion.outputs.semVer }}
